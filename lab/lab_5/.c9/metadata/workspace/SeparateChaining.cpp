{"filter":false,"title":"SeparateChaining.cpp","tooltip":"/SeparateChaining.cpp","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":55,"column":9},"end":{"row":55,"column":10},"action":"insert","lines":["c"],"id":70}],[{"start":{"row":55,"column":10},"end":{"row":55,"column":11},"action":"insert","lines":["h"],"id":71}],[{"start":{"row":55,"column":10},"end":{"row":55,"column":11},"action":"remove","lines":["h"],"id":72}],[{"start":{"row":55,"column":9},"end":{"row":55,"column":10},"action":"remove","lines":["c"],"id":73}],[{"start":{"row":55,"column":9},"end":{"row":55,"column":10},"action":"insert","lines":[" "],"id":74}],[{"start":{"row":55,"column":10},"end":{"row":55,"column":11},"action":"insert","lines":["c"],"id":75}],[{"start":{"row":55,"column":11},"end":{"row":55,"column":12},"action":"insert","lines":["h"],"id":76}],[{"start":{"row":55,"column":12},"end":{"row":55,"column":13},"action":"insert","lines":["a"],"id":77}],[{"start":{"row":55,"column":13},"end":{"row":55,"column":14},"action":"insert","lines":["r"],"id":78}],[{"start":{"row":55,"column":14},"end":{"row":55,"column":15},"action":"insert","lines":[" "],"id":79}],[{"start":{"row":55,"column":15},"end":{"row":55,"column":16},"action":"insert","lines":["c"],"id":80}],[{"start":{"row":55,"column":16},"end":{"row":55,"column":17},"action":"insert","lines":["h"],"id":81}],[{"start":{"row":55,"column":17},"end":{"row":55,"column":18},"action":"insert","lines":[" "],"id":82}],[{"start":{"row":55,"column":18},"end":{"row":55,"column":19},"action":"insert","lines":[":"],"id":83}],[{"start":{"row":55,"column":19},"end":{"row":55,"column":20},"action":"insert","lines":[" "],"id":84}],[{"start":{"row":55,"column":20},"end":{"row":55,"column":21},"action":"insert","lines":["k"],"id":85}],[{"start":{"row":55,"column":21},"end":{"row":55,"column":22},"action":"insert","lines":["e"],"id":86}],[{"start":{"row":55,"column":22},"end":{"row":55,"column":23},"action":"insert","lines":["u"],"id":87}],[{"start":{"row":55,"column":22},"end":{"row":55,"column":23},"action":"remove","lines":["u"],"id":88}],[{"start":{"row":55,"column":22},"end":{"row":55,"column":23},"action":"insert","lines":["y"],"id":89}],[{"start":{"row":55,"column":23},"end":{"row":55,"column":24},"action":"insert","lines":[" "],"id":90}],[{"start":{"row":55,"column":23},"end":{"row":55,"column":24},"action":"remove","lines":[" "],"id":91}],[{"start":{"row":55,"column":23},"end":{"row":55,"column":24},"action":"insert","lines":[" "],"id":92}],[{"start":{"row":55,"column":25},"end":{"row":56,"column":0},"action":"insert","lines":["",""],"id":93},{"start":{"row":56,"column":0},"end":{"row":56,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":56,"column":4},"end":{"row":56,"column":8},"action":"insert","lines":["    "],"id":94}],[{"start":{"row":56,"column":8},"end":{"row":56,"column":9},"action":"insert","lines":["{"],"id":95}],[{"start":{"row":56,"column":9},"end":{"row":58,"column":9},"action":"insert","lines":["","            ","        }"],"id":96}],[{"start":{"row":58,"column":9},"end":{"row":59,"column":0},"action":"insert","lines":["",""],"id":97},{"start":{"row":59,"column":0},"end":{"row":59,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":59,"column":8},"end":{"row":59,"column":9},"action":"insert","lines":["r"],"id":98}],[{"start":{"row":59,"column":9},"end":{"row":59,"column":10},"action":"insert","lines":["e"],"id":99}],[{"start":{"row":59,"column":10},"end":{"row":59,"column":11},"action":"insert","lines":["t"],"id":100}],[{"start":{"row":59,"column":11},"end":{"row":59,"column":12},"action":"insert","lines":["u"],"id":101}],[{"start":{"row":59,"column":12},"end":{"row":59,"column":13},"action":"insert","lines":["r"],"id":102}],[{"start":{"row":59,"column":13},"end":{"row":59,"column":14},"action":"insert","lines":["n"],"id":103}],[{"start":{"row":59,"column":14},"end":{"row":59,"column":15},"action":"insert","lines":[" "],"id":104}],[{"start":{"row":59,"column":15},"end":{"row":59,"column":16},"action":"insert","lines":["h"],"id":105}],[{"start":{"row":59,"column":16},"end":{"row":59,"column":17},"action":"insert","lines":["a"],"id":106}],[{"start":{"row":59,"column":17},"end":{"row":59,"column":18},"action":"insert","lines":["s"],"id":107}],[{"start":{"row":59,"column":18},"end":{"row":59,"column":19},"action":"insert","lines":["h"],"id":108}],[{"start":{"row":59,"column":19},"end":{"row":59,"column":20},"action":"insert","lines":["V"],"id":109}],[{"start":{"row":59,"column":20},"end":{"row":59,"column":21},"action":"insert","lines":["a"],"id":110}],[{"start":{"row":59,"column":21},"end":{"row":59,"column":22},"action":"insert","lines":["l"],"id":111}],[{"start":{"row":59,"column":22},"end":{"row":59,"column":23},"action":"insert","lines":[";"],"id":112}],[{"start":{"row":59,"column":4},"end":{"row":59,"column":8},"action":"remove","lines":["    "],"id":113}],[{"start":{"row":57,"column":12},"end":{"row":64,"column":45},"action":"insert","lines":["int highorder = hashVal & 0xf8000000 // extract high-order 5 bits from hashVal","// 0xf8000000 is the hexadecimal representation","// for the 32-bit number with the first five","// bits = 1 and the other bits = 0","hashVal = hashVal << 5 // shift hashVal left by 5 bits","hashVal = hashVal ^ (highorder >> 27) // move the highorder 5 bits to the","// low-order end and XOR into hashVal","hashVal = hashVal ^ ch // XOR ch into hashVal"],"id":115}],[{"start":{"row":57,"column":62},"end":{"row":60,"column":34},"action":"remove","lines":["gh-order 5 bits from hashVal","// 0xf8000000 is the hexadecimal representation","// for the 32-bit number with the first five","// bits = 1 and the other bits = 0"],"id":116}],[{"start":{"row":57,"column":61},"end":{"row":57,"column":62},"action":"remove","lines":["i"],"id":117}],[{"start":{"row":57,"column":60},"end":{"row":57,"column":61},"action":"remove","lines":["h"],"id":118}],[{"start":{"row":57,"column":59},"end":{"row":57,"column":60},"action":"remove","lines":[" "],"id":119}],[{"start":{"row":57,"column":58},"end":{"row":57,"column":59},"action":"remove","lines":["t"],"id":120}],[{"start":{"row":57,"column":57},"end":{"row":57,"column":58},"action":"remove","lines":["c"],"id":121}],[{"start":{"row":57,"column":56},"end":{"row":57,"column":57},"action":"remove","lines":["a"],"id":122}],[{"start":{"row":57,"column":55},"end":{"row":57,"column":56},"action":"remove","lines":["r"],"id":123}],[{"start":{"row":57,"column":54},"end":{"row":57,"column":55},"action":"remove","lines":["t"],"id":124}],[{"start":{"row":57,"column":53},"end":{"row":57,"column":54},"action":"remove","lines":["x"],"id":125}],[{"start":{"row":57,"column":52},"end":{"row":57,"column":53},"action":"remove","lines":["e"],"id":126}],[{"start":{"row":57,"column":51},"end":{"row":57,"column":52},"action":"remove","lines":[" "],"id":127}],[{"start":{"row":57,"column":50},"end":{"row":57,"column":51},"action":"remove","lines":["/"],"id":128}],[{"start":{"row":57,"column":49},"end":{"row":57,"column":50},"action":"remove","lines":["/"],"id":129}],[{"start":{"row":57,"column":48},"end":{"row":57,"column":49},"action":"remove","lines":[" "],"id":130}],[{"start":{"row":59,"column":38},"end":{"row":59,"column":73},"action":"remove","lines":["// move the highorder 5 bits to the"],"id":131}],[{"start":{"row":59,"column":37},"end":{"row":59,"column":38},"action":"remove","lines":[" "],"id":132}],[{"start":{"row":58,"column":23},"end":{"row":58,"column":54},"action":"remove","lines":["// shift hashVal left by 5 bits"],"id":133}],[{"start":{"row":61,"column":23},"end":{"row":61,"column":45},"action":"remove","lines":["// XOR ch into hashVal"],"id":134}],[{"start":{"row":59,"column":37},"end":{"row":60,"column":37},"action":"remove","lines":["","// low-order end and XOR into hashVal"],"id":135}],[{"start":{"row":58,"column":0},"end":{"row":58,"column":4},"action":"insert","lines":["    "],"id":136}],[{"start":{"row":59,"column":0},"end":{"row":59,"column":4},"action":"insert","lines":["    "],"id":137}],[{"start":{"row":59,"column":4},"end":{"row":59,"column":8},"action":"insert","lines":["    "],"id":138}],[{"start":{"row":58,"column":4},"end":{"row":58,"column":8},"action":"insert","lines":["    "],"id":139}],[{"start":{"row":58,"column":8},"end":{"row":58,"column":12},"action":"insert","lines":["    "],"id":140}],[{"start":{"row":56,"column":4},"end":{"row":56,"column":8},"action":"remove","lines":["    "],"id":141}],[{"start":{"row":61,"column":4},"end":{"row":61,"column":8},"action":"remove","lines":["    "],"id":142}],[{"start":{"row":57,"column":8},"end":{"row":57,"column":12},"action":"remove","lines":["    "],"id":143}],[{"start":{"row":58,"column":8},"end":{"row":58,"column":12},"action":"remove","lines":["    "],"id":144}],[{"start":{"row":60,"column":0},"end":{"row":60,"column":4},"action":"insert","lines":["    "],"id":145}],[{"start":{"row":57,"column":44},"end":{"row":57,"column":45},"action":"insert","lines":[";"],"id":146}],[{"start":{"row":58,"column":30},"end":{"row":58,"column":31},"action":"insert","lines":[";"],"id":147}],[{"start":{"row":59,"column":45},"end":{"row":59,"column":46},"action":"insert","lines":[";"],"id":148}],[{"start":{"row":60,"column":26},"end":{"row":60,"column":27},"action":"insert","lines":[";"],"id":149}],[{"start":{"row":60,"column":4},"end":{"row":60,"column":8},"action":"insert","lines":["    "],"id":150}],[{"start":{"row":9,"column":12},"end":{"row":9,"column":13},"action":"insert","lines":["1"],"id":151}],[{"start":{"row":28,"column":13},"end":{"row":28,"column":14},"action":"insert","lines":["1"],"id":152}],[{"start":{"row":0,"column":0},"end":{"row":71,"column":1},"action":"remove","lines":["#include \"SeparateChaining.h\"","#include <iostream>","using namespace std;","","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime1( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime1( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime( n ); n += 2 )","        ;","","    return n;","}","","/**"," * A hash routine for string objects."," */","size_t hash( const string & key )","{","    size_t hashVal = 0;","","    for( char ch : key )","        hashVal = 37 * hashVal + ch;","","    return hashVal;","}","size_t hash2 (const string & key)","{","    size_t hashVal = 0;","    ","    for ( char ch : key )","    {","        int highorder = hashVal & 0xf8000000;","        hashVal = hashVal << 5; ","        hashVal = hashVal ^ (highorder >> 27);","        hashVal = hashVal ^ ch; ","    }","    return hashVal;","}","","/**"," * A hash routine for ints."," */","size_t hash( int key )","{","    return key;","}"],"id":153},{"start":{"row":0,"column":0},"end":{"row":58,"column":1},"action":"insert","lines":["#include \"SeparateChaining.h\"","#include <iostream>","using namespace std;","","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime2( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime2( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime2( n ); n += 2 )","        ;","","    return n;","}","","/**"," * A hash routine for string objects."," */","size_t hash( const string & key )","{","    size_t hashVal = 0;","","    for( char ch : key )","        hashVal = 37 * hashVal + ch;","","    return hashVal;","}","","/**"," * A hash routine for ints."," */","size_t hash( int key )","{","    return key;","}"]}],[{"start":{"row":46,"column":24},"end":{"row":46,"column":25},"action":"insert","lines":[" "],"id":154}],[{"start":{"row":46,"column":25},"end":{"row":46,"column":26},"action":"insert","lines":["{"],"id":155}],[{"start":{"row":47,"column":36},"end":{"row":47,"column":37},"action":"insert","lines":["}"],"id":156}],[{"start":{"row":47,"column":36},"end":{"row":47,"column":37},"action":"remove","lines":["}"],"id":157}],[{"start":{"row":47,"column":36},"end":{"row":48,"column":0},"action":"insert","lines":["",""],"id":158},{"start":{"row":48,"column":0},"end":{"row":48,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":48,"column":8},"end":{"row":48,"column":9},"action":"insert","lines":["}"],"id":159},{"start":{"row":48,"column":0},"end":{"row":48,"column":8},"action":"remove","lines":["        "]},{"start":{"row":48,"column":0},"end":{"row":48,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":47,"column":8},"end":{"row":47,"column":36},"action":"remove","lines":["hashVal = 37 * hashVal + ch;"],"id":160},{"start":{"row":47,"column":8},"end":{"row":54,"column":45},"action":"insert","lines":["int highorder = hashVal & 0xf8000000 // extract high-order 5 bits from hashVal","// 0xf8000000 is the hexadecimal representation","// for the 32-bit number with the first five","// bits = 1 and the other bits = 0","hashVal = hashVal << 5 // shift hashVal left by 5 bits","hashVal = hashVal ^ (highorder >> 27) // move the highorder 5 bits to the","// low-order end and XOR into hashVal","hashVal = hashVal ^ ch // XOR ch into hashVal"]}],[{"start":{"row":54,"column":22},"end":{"row":54,"column":45},"action":"remove","lines":[" // XOR ch into hashVal"],"id":161},{"start":{"row":54,"column":22},"end":{"row":54,"column":23},"action":"insert","lines":[";"]}],[{"start":{"row":52,"column":37},"end":{"row":53,"column":37},"action":"remove","lines":[" // move the highorder 5 bits to the","// low-order end and XOR into hashVal"],"id":162},{"start":{"row":52,"column":37},"end":{"row":52,"column":38},"action":"insert","lines":[";"]}],[{"start":{"row":51,"column":22},"end":{"row":51,"column":54},"action":"remove","lines":[" // shift hashVal left by 5 bits"],"id":163},{"start":{"row":51,"column":22},"end":{"row":51,"column":23},"action":"insert","lines":[";"]}],[{"start":{"row":47,"column":44},"end":{"row":50,"column":34},"action":"remove","lines":[" // extract high-order 5 bits from hashVal","// 0xf8000000 is the hexadecimal representation","// for the 32-bit number with the first five","// bits = 1 and the other bits = 0"],"id":164},{"start":{"row":47,"column":44},"end":{"row":47,"column":45},"action":"insert","lines":[";"]}],[{"start":{"row":48,"column":0},"end":{"row":48,"column":4},"action":"insert","lines":["    "],"id":165}],[{"start":{"row":48,"column":4},"end":{"row":48,"column":8},"action":"insert","lines":["    "],"id":166}],[{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"insert","lines":["    "],"id":167}],[{"start":{"row":49,"column":4},"end":{"row":49,"column":8},"action":"insert","lines":["    "],"id":168}],[{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"insert","lines":["    "],"id":169}],[{"start":{"row":50,"column":4},"end":{"row":50,"column":8},"action":"insert","lines":["    "],"id":170}],[{"start":{"row":0,"column":0},"end":{"row":62,"column":1},"action":"remove","lines":["#include \"SeparateChaining.h\"","#include <iostream>","using namespace std;","","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime2( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime2( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime2( n ); n += 2 )","        ;","","    return n;","}","","/**"," * A hash routine for string objects."," */","size_t hash( const string & key )","{","    size_t hashVal = 0;","","    for( char ch : key ) {","        int highorder = hashVal & 0xf8000000;","        hashVal = hashVal << 5;","        hashVal = hashVal ^ (highorder >> 27);","        hashVal = hashVal ^ ch;","    }","","    return hashVal;","}","","/**"," * A hash routine for ints."," */","size_t hash( int key )","{","    return key;","}"],"id":171},{"start":{"row":0,"column":0},"end":{"row":58,"column":1},"action":"insert","lines":["#include \"SeparateChaining.h\"","#include <iostream>","using namespace std;","","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime2( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime2( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime2( n ); n += 2 )","        ;","","    return n;","}","","/**"," * A hash routine for string objects."," */","size_t hash( const string & key )","{","    size_t hashVal = 0;","","    for( char ch : key )","        hashVal = 37 * hashVal + ch;","","    return hashVal;","}","","/**"," * A hash routine for ints."," */","size_t hash( int key )","{","    return key;","}"]}]]},"ace":{"folds":[],"scrolltop":562,"scrollleft":0,"selection":{"start":{"row":49,"column":19},"end":{"row":49,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":54,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1447807766000,"hash":"39558702381127c264688dca2a6b5c7a41172df0"}