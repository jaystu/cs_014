{"filter":false,"title":"QuadraticProbing.cpp","tooltip":"/QuadraticProbing.cpp","undoManager":{"mark":19,"position":18,"stack":[[{"start":{"row":0,"column":0},"end":{"row":36,"column":1},"action":"insert","lines":["#include \"QuadraticProbing.h\"","#include <iostream>","using namespace std;","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime( n ); n += 2 )","        ;","","    return n;","}"],"id":1}],[{"start":{"row":36,"column":1},"end":{"row":37,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":37,"column":0},"end":{"row":58,"column":1},"action":"insert","lines":["size_t hash( const string & key )","{","    size_t hashVal = 0;","","    for( char ch : key )","        hashVal = 37 * hashVal + ch;","","    return hashVal;","}","size_t hash2 (const string & key)","{","    size_t hashVal = 0;","    ","    for ( char ch : key )","    {","        int highorder = hashVal & 0xf8000000;","        hashVal = hashVal << 5; ","        hashVal = hashVal ^ (highorder >> 27);","        hashVal = hashVal ^ ch; ","    }","    return hashVal;","}"],"id":3}],[{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"insert","lines":["2"],"id":4}],[{"start":{"row":27,"column":13},"end":{"row":27,"column":14},"action":"insert","lines":["2"],"id":5}],[{"start":{"row":0,"column":0},"end":{"row":58,"column":1},"action":"remove","lines":["#include \"QuadraticProbing.h\"","#include <iostream>","using namespace std;","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime2( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime2( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime( n ); n += 2 )","        ;","","    return n;","}","size_t hash( const string & key )","{","    size_t hashVal = 0;","","    for( char ch : key )","        hashVal = 37 * hashVal + ch;","","    return hashVal;","}","size_t hash2 (const string & key)","{","    size_t hashVal = 0;","    ","    for ( char ch : key )","    {","        int highorder = hashVal & 0xf8000000;","        hashVal = hashVal << 5; ","        hashVal = hashVal ^ (highorder >> 27);","        hashVal = hashVal ^ ch; ","    }","    return hashVal;","}"],"id":6},{"start":{"row":0,"column":0},"end":{"row":36,"column":1},"action":"insert","lines":["#include \"QuadraticProbing.h\"","#include <iostream>","using namespace std;","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime( n ); n += 2 )","        ;","","    return n;","}"]}],[{"start":{"row":36,"column":1},"end":{"row":37,"column":0},"action":"insert","lines":["",""],"id":7}],[{"start":{"row":37,"column":0},"end":{"row":49,"column":1},"action":"insert","lines":["size_t hash( const string & key )","{","    size_t hashVal = 0;","","    for( char ch : key ) {","        int highorder = hashVal & 0xf8000000;","        hashVal = hashVal << 5;","        hashVal = hashVal ^ (highorder >> 27);","        hashVal = hashVal ^ ch;","    }","","    return hashVal;","}"],"id":8}],[{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"insert","lines":["2"],"id":10}],[{"start":{"row":27,"column":13},"end":{"row":27,"column":14},"action":"insert","lines":["2"],"id":11}],[{"start":{"row":0,"column":0},"end":{"row":49,"column":1},"action":"remove","lines":["#include \"QuadraticProbing.h\"","#include <iostream>","using namespace std;","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime2( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime2( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime( n ); n += 2 )","        ;","","    return n;","}","size_t hash( const string & key )","{","    size_t hashVal = 0;","","    for( char ch : key ) {","        int highorder = hashVal & 0xf8000000;","        hashVal = hashVal << 5;","        hashVal = hashVal ^ (highorder >> 27);","        hashVal = hashVal ^ ch;","    }","","    return hashVal;","}"],"id":12},{"start":{"row":0,"column":0},"end":{"row":152,"column":6},"action":"insert","lines":["#ifndef QUADRATIC_PROBING_H","#define QUADRATIC_PROBING_H","","#include <vector>","#include <algorithm>","#include <functional>","#include <string>","using namespace std;","","int nextPrime( int n );","","// QuadraticProbing Hash table class","//","// CONSTRUCTION: an approximate initial size or default of 101","//","// ******************PUBLIC OPERATIONS*********************","// bool insert( x )       --> Insert x","// bool remove( x )       --> Remove x","// bool contains( x )     --> Return true if x is present","// void makeEmpty( )      --> Remove all items","// int hashCode( string str ) --> Global method to hash strings","","template <typename HashedObj>","class HashTable2","{","  public:","    explicit HashTable2( int size = 101 ) : array( nextPrime( size ) )","      { makeEmpty( ); }","","    bool contains( const HashedObj & x ) const","    {","        return isActive( findPos( x ) );","    }","","    void makeEmpty( )","    {","        currentSize = 0;","        for( auto & entry : array )","            entry.info = EMPTY;","    }","","    bool insert( const HashedObj & x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ].element = x;","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","    ","    bool insert( HashedObj && x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ] = std::move( x );","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","","    bool remove( const HashedObj & x )","    {","        int currentPos = findPos( x );","        if( !isActive( currentPos ) )","            return false;","","        array[ currentPos ].info = DELETED;","        return true;","    }","","    enum EntryType { ACTIVE, EMPTY, DELETED };","","  private:","    struct HashEntry","    {","        HashedObj element;","        EntryType info;","","        HashEntry( const HashedObj & e = HashedObj{ }, EntryType i = EMPTY )","          : element{ e }, info{ i } { }","        ","        HashEntry( HashedObj && e, EntryType i = EMPTY )","          : element{ std::move( e ) }, info{ i } { }","    };","    ","    vector<HashEntry> array;","    int currentSize;","","    bool isActive( int currentPos ) const","      { return array[ currentPos ].info == ACTIVE; }","","    int findPos( const HashedObj & x ) const","    {","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return currentPos;","    }","","    void rehash( )","    {","        vector<HashEntry> oldArray = array;","","            // Create new double-sized, empty table","        array.resize( nextPrime( 2 * oldArray.size( ) ) );","        for( auto & entry : array )","            entry.info = EMPTY;","","            // Copy table over","        currentSize = 0;","        for( auto & entry : oldArray )","            if( entry.info == ACTIVE )","                insert( std::move( entry.element ) );","    }","","    size_t myhash( const HashedObj & x ) const","    {","        static hash<HashedObj> hf;","        return hf( x ) % array.size( );","    }","};","","#endif"]}],[{"start":{"row":9,"column":13},"end":{"row":9,"column":14},"action":"insert","lines":["2"],"id":13}],[{"start":{"row":26,"column":60},"end":{"row":26,"column":61},"action":"insert","lines":["2"],"id":14}],[{"start":{"row":134,"column":31},"end":{"row":134,"column":32},"action":"insert","lines":["2"],"id":15}],[{"start":{"row":0,"column":0},"end":{"row":152,"column":6},"action":"remove","lines":["#ifndef QUADRATIC_PROBING_H","#define QUADRATIC_PROBING_H","","#include <vector>","#include <algorithm>","#include <functional>","#include <string>","using namespace std;","","int nextPrime2( int n );","","// QuadraticProbing Hash table class","//","// CONSTRUCTION: an approximate initial size or default of 101","//","// ******************PUBLIC OPERATIONS*********************","// bool insert( x )       --> Insert x","// bool remove( x )       --> Remove x","// bool contains( x )     --> Return true if x is present","// void makeEmpty( )      --> Remove all items","// int hashCode( string str ) --> Global method to hash strings","","template <typename HashedObj>","class HashTable2","{","  public:","    explicit HashTable2( int size = 101 ) : array( nextPrime2( size ) )","      { makeEmpty( ); }","","    bool contains( const HashedObj & x ) const","    {","        return isActive( findPos( x ) );","    }","","    void makeEmpty( )","    {","        currentSize = 0;","        for( auto & entry : array )","            entry.info = EMPTY;","    }","","    bool insert( const HashedObj & x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ].element = x;","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","    ","    bool insert( HashedObj && x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ] = std::move( x );","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","","    bool remove( const HashedObj & x )","    {","        int currentPos = findPos( x );","        if( !isActive( currentPos ) )","            return false;","","        array[ currentPos ].info = DELETED;","        return true;","    }","","    enum EntryType { ACTIVE, EMPTY, DELETED };","","  private:","    struct HashEntry","    {","        HashedObj element;","        EntryType info;","","        HashEntry( const HashedObj & e = HashedObj{ }, EntryType i = EMPTY )","          : element{ e }, info{ i } { }","        ","        HashEntry( HashedObj && e, EntryType i = EMPTY )","          : element{ std::move( e ) }, info{ i } { }","    };","    ","    vector<HashEntry> array;","    int currentSize;","","    bool isActive( int currentPos ) const","      { return array[ currentPos ].info == ACTIVE; }","","    int findPos( const HashedObj & x ) const","    {","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return currentPos;","    }","","    void rehash( )","    {","        vector<HashEntry> oldArray = array;","","            // Create new double-sized, empty table","        array.resize( nextPrime2( 2 * oldArray.size( ) ) );","        for( auto & entry : array )","            entry.info = EMPTY;","","            // Copy table over","        currentSize = 0;","        for( auto & entry : oldArray )","            if( entry.info == ACTIVE )","                insert( std::move( entry.element ) );","    }","","    size_t myhash( const HashedObj & x ) const","    {","        static hash<HashedObj> hf;","        return hf( x ) % array.size( );","    }","};","","#endif"],"id":16},{"start":{"row":0,"column":0},"end":{"row":36,"column":1},"action":"insert","lines":["#include \"QuadraticProbing.h\"","#include <iostream>","using namespace std;","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime( n ); n += 2 )","        ;","","    return n;","}"]}],[{"start":{"row":27,"column":13},"end":{"row":27,"column":14},"action":"insert","lines":["2"],"id":17}],[{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"insert","lines":["2"],"id":18}],[{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"remove","lines":["2"],"id":19}],[{"start":{"row":27,"column":13},"end":{"row":27,"column":14},"action":"remove","lines":["2"],"id":20}],[{"start":{"row":27,"column":13},"end":{"row":27,"column":14},"action":"insert","lines":["2"],"id":21}]]},"ace":{"folds":[],"scrolltop":263.5,"scrollleft":0,"selection":{"start":{"row":27,"column":13},"end":{"row":27,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1447893360617,"hash":"72a4a943a4226cb0e0443650bab5e7843fef27d6"}