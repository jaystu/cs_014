{"filter":false,"title":"QuadraticProbing.h","tooltip":"/QuadraticProbing.h","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":134,"column":31},"end":{"row":134,"column":32},"action":"insert","lines":["2"],"id":23}],[{"start":{"row":0,"column":0},"end":{"row":152,"column":6},"action":"remove","lines":["#ifndef QUADRATIC_PROBING_H","#define QUADRATIC_PROBING_H","","#include <vector>","#include <algorithm>","#include <functional>","#include <string>","using namespace std;","","int nextPrime( int n );","","// QuadraticProbing Hash table class","//","// CONSTRUCTION: an approximate initial size or default of 101","//","// ******************PUBLIC OPERATIONS*********************","// bool insert( x )       --> Insert x","// bool remove( x )       --> Remove x","// bool contains( x )     --> Return true if x is present","// void makeEmpty( )      --> Remove all items","// int hashCode( string str ) --> Global method to hash strings","","template <typename HashedObj>","class HashTable2","{","  public:","    explicit HashTable2( int size = 101 ) : array( nextPrime2( size ) )","      { makeEmpty( ); }","","    bool contains( const HashedObj & x ) const","    {","        return isActive( findPos( x ) );","    }","","    void makeEmpty( )","    {","        currentSize = 0;","        for( auto & entry : array )","            entry.info = EMPTY;","    }","","    bool insert( const HashedObj & x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ].element = x;","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","    ","    bool insert( HashedObj && x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ] = std::move( x );","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","","    bool remove( const HashedObj & x )","    {","        int currentPos = findPos( x );","        if( !isActive( currentPos ) )","            return false;","","        array[ currentPos ].info = DELETED;","        return true;","    }","","    enum EntryType { ACTIVE, EMPTY, DELETED };","","  private:","    struct HashEntry","    {","        HashedObj element;","        EntryType info;","","        HashEntry( const HashedObj & e = HashedObj{ }, EntryType i = EMPTY )","          : element{ e }, info{ i } { }","        ","        HashEntry( HashedObj && e, EntryType i = EMPTY )","          : element{ std::move( e ) }, info{ i } { }","    };","    ","    vector<HashEntry> array;","    int currentSize;","","    bool isActive( int currentPos ) const","      { return array[ currentPos ].info == ACTIVE; }","","    int findPos( const HashedObj & x ) const","    {","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return currentPos;","    }","","    void rehash( )","    {","        vector<HashEntry> oldArray = array;","","            // Create new double-sized, empty table","        array.resize( nextPrime2( 2 * oldArray.size( ) ) );","        for( auto & entry : array )","            entry.info = EMPTY;","","            // Copy table over","        currentSize = 0;","        for( auto & entry : oldArray )","            if( entry.info == ACTIVE )","                insert( std::move( entry.element ) );","    }","","    size_t myhash( const HashedObj & x ) const","    {","        static hash<HashedObj> hf;","        return hf( x ) % array.size( );","    }","};","","#endif"],"id":24},{"start":{"row":0,"column":0},"end":{"row":152,"column":6},"action":"insert","lines":["#ifndef QUADRATIC_PROBING_H","#define QUADRATIC_PROBING_H","","#include <vector>","#include <algorithm>","#include <functional>","#include <string>","using namespace std;","","int nextPrime( int n );","","// QuadraticProbing Hash table class","//","// CONSTRUCTION: an approximate initial size or default of 101","//","// ******************PUBLIC OPERATIONS*********************","// bool insert( x )       --> Insert x","// bool remove( x )       --> Remove x","// bool contains( x )     --> Return true if x is present","// void makeEmpty( )      --> Remove all items","// int hashCode( string str ) --> Global method to hash strings","","template <typename HashedObj>","class HashTable2","{","  public:","    explicit HashTable2( int size = 101 ) : array( nextPrime( size ) )","      { makeEmpty( ); }","","    bool contains( const HashedObj & x ) const","    {","        return isActive( findPos( x ) );","    }","","    void makeEmpty( )","    {","        currentSize = 0;","        for( auto & entry : array )","            entry.info = EMPTY;","    }","","    bool insert( const HashedObj & x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ].element = x;","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","    ","    bool insert( HashedObj && x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ] = std::move( x );","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","","    bool remove( const HashedObj & x )","    {","        int currentPos = findPos( x );","        if( !isActive( currentPos ) )","            return false;","","        array[ currentPos ].info = DELETED;","        return true;","    }","","    enum EntryType { ACTIVE, EMPTY, DELETED };","","  private:","    struct HashEntry","    {","        HashedObj element;","        EntryType info;","","        HashEntry( const HashedObj & e = HashedObj{ }, EntryType i = EMPTY )","          : element{ e }, info{ i } { }","        ","        HashEntry( HashedObj && e, EntryType i = EMPTY )","          : element{ std::move( e ) }, info{ i } { }","    };","    ","    vector<HashEntry> array;","    int currentSize;","","    bool isActive( int currentPos ) const","      { return array[ currentPos ].info == ACTIVE; }","","    int findPos( const HashedObj & x ) const","    {","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return currentPos;","    }","","    void rehash( )","    {","        vector<HashEntry> oldArray = array;","","            // Create new double-sized, empty table","        array.resize( nextPrime( 2 * oldArray.size( ) ) );","        for( auto & entry : array )","            entry.info = EMPTY;","","            // Copy table over","        currentSize = 0;","        for( auto & entry : oldArray )","            if( entry.info == ACTIVE )","                insert( std::move( entry.element ) );","    }","","    size_t myhash( const HashedObj & x ) const","    {","        static hash<HashedObj> hf;","        return hf( x ) % array.size( );","    }","};","","#endif"]}],[{"start":{"row":147,"column":19},"end":{"row":147,"column":20},"action":"insert","lines":["2"],"id":25}],[{"start":{"row":147,"column":19},"end":{"row":147,"column":20},"action":"remove","lines":["2"],"id":26}],[{"start":{"row":0,"column":0},"end":{"row":152,"column":6},"action":"remove","lines":["#ifndef QUADRATIC_PROBING_H","#define QUADRATIC_PROBING_H","","#include <vector>","#include <algorithm>","#include <functional>","#include <string>","using namespace std;","","int nextPrime( int n );","","// QuadraticProbing Hash table class","//","// CONSTRUCTION: an approximate initial size or default of 101","//","// ******************PUBLIC OPERATIONS*********************","// bool insert( x )       --> Insert x","// bool remove( x )       --> Remove x","// bool contains( x )     --> Return true if x is present","// void makeEmpty( )      --> Remove all items","// int hashCode( string str ) --> Global method to hash strings","","template <typename HashedObj>","class HashTable2","{","  public:","    explicit HashTable2( int size = 101 ) : array( nextPrime( size ) )","      { makeEmpty( ); }","","    bool contains( const HashedObj & x ) const","    {","        return isActive( findPos( x ) );","    }","","    void makeEmpty( )","    {","        currentSize = 0;","        for( auto & entry : array )","            entry.info = EMPTY;","    }","","    bool insert( const HashedObj & x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ].element = x;","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","    ","    bool insert( HashedObj && x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ] = std::move( x );","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","","    bool remove( const HashedObj & x )","    {","        int currentPos = findPos( x );","        if( !isActive( currentPos ) )","            return false;","","        array[ currentPos ].info = DELETED;","        return true;","    }","","    enum EntryType { ACTIVE, EMPTY, DELETED };","","  private:","    struct HashEntry","    {","        HashedObj element;","        EntryType info;","","        HashEntry( const HashedObj & e = HashedObj{ }, EntryType i = EMPTY )","          : element{ e }, info{ i } { }","        ","        HashEntry( HashedObj && e, EntryType i = EMPTY )","          : element{ std::move( e ) }, info{ i } { }","    };","    ","    vector<HashEntry> array;","    int currentSize;","","    bool isActive( int currentPos ) const","      { return array[ currentPos ].info == ACTIVE; }","","    int findPos( const HashedObj & x ) const","    {","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return currentPos;","    }","","    void rehash( )","    {","        vector<HashEntry> oldArray = array;","","            // Create new double-sized, empty table","        array.resize( nextPrime( 2 * oldArray.size( ) ) );","        for( auto & entry : array )","            entry.info = EMPTY;","","            // Copy table over","        currentSize = 0;","        for( auto & entry : oldArray )","            if( entry.info == ACTIVE )","                insert( std::move( entry.element ) );","    }","","    size_t myhash( const HashedObj & x ) const","    {","        static hash<HashedObj> hf;","        return hf( x ) % array.size( );","    }","};","","#endif"],"id":27},{"start":{"row":0,"column":0},"end":{"row":152,"column":6},"action":"insert","lines":["#ifndef QUADRATIC_PROBING_H","#define QUADRATIC_PROBING_H","","#include <vector>","#include <algorithm>","#include <functional>","#include <string>","using namespace std;","","int nextPrime( int n );","","// QuadraticProbing Hash table class","//","// CONSTRUCTION: an approximate initial size or default of 101","//","// ******************PUBLIC OPERATIONS*********************","// bool insert( x )       --> Insert x","// bool remove( x )       --> Remove x","// bool contains( x )     --> Return true if x is present","// void makeEmpty( )      --> Remove all items","// int hashCode( string str ) --> Global method to hash strings","","template <typename HashedObj>","class HashTable2","{","  public:","    explicit HashTable2( int size = 101 ) : array( nextPrime( size ) )","      { makeEmpty( ); }","","    bool contains( const HashedObj & x ) const","    {","        return isActive( findPos( x ) );","    }","","    void makeEmpty( )","    {","        currentSize = 0;","        for( auto & entry : array )","            entry.info = EMPTY;","    }","","    bool insert( const HashedObj & x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ].element = x;","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","    ","    bool insert( HashedObj && x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ] = std::move( x );","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","","    bool remove( const HashedObj & x )","    {","        int currentPos = findPos( x );","        if( !isActive( currentPos ) )","            return false;","","        array[ currentPos ].info = DELETED;","        return true;","    }","","    enum EntryType { ACTIVE, EMPTY, DELETED };","","  private:","    struct HashEntry","    {","        HashedObj element;","        EntryType info;","","        HashEntry( const HashedObj & e = HashedObj{ }, EntryType i = EMPTY )","          : element{ e }, info{ i } { }","        ","        HashEntry( HashedObj && e, EntryType i = EMPTY )","          : element{ std::move( e ) }, info{ i } { }","    };","    ","    vector<HashEntry> array;","    int currentSize;","","    bool isActive( int currentPos ) const","      { return array[ currentPos ].info == ACTIVE; }","","    int findPos( const HashedObj & x ) const","    {","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return currentPos;","    }","","    void rehash( )","    {","        vector<HashEntry> oldArray = array;","","            // Create new double-sized, empty table","        array.resize( nextPrime( 2 * oldArray.size( ) ) );","        for( auto & entry : array )","            entry.info = EMPTY;","","            // Copy table over","        currentSize = 0;","        for( auto & entry : oldArray )","            if( entry.info == ACTIVE )","                insert( std::move( entry.element ) );","    }","","    size_t myhash( const HashedObj & x ) const","    {","        static hash<HashedObj> hf;","        return hf( x ) % array.size( );","    }","};","","#endif"]}],[{"start":{"row":0,"column":0},"end":{"row":152,"column":6},"action":"remove","lines":["#ifndef QUADRATIC_PROBING_H","#define QUADRATIC_PROBING_H","","#include <vector>","#include <algorithm>","#include <functional>","#include <string>","using namespace std;","","int nextPrime( int n );","","// QuadraticProbing Hash table class","//","// CONSTRUCTION: an approximate initial size or default of 101","//","// ******************PUBLIC OPERATIONS*********************","// bool insert( x )       --> Insert x","// bool remove( x )       --> Remove x","// bool contains( x )     --> Return true if x is present","// void makeEmpty( )      --> Remove all items","// int hashCode( string str ) --> Global method to hash strings","","template <typename HashedObj>","class HashTable2","{","  public:","    explicit HashTable2( int size = 101 ) : array( nextPrime( size ) )","      { makeEmpty( ); }","","    bool contains( const HashedObj & x ) const","    {","        return isActive( findPos( x ) );","    }","","    void makeEmpty( )","    {","        currentSize = 0;","        for( auto & entry : array )","            entry.info = EMPTY;","    }","","    bool insert( const HashedObj & x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ].element = x;","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","    ","    bool insert( HashedObj && x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ] = std::move( x );","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","","    bool remove( const HashedObj & x )","    {","        int currentPos = findPos( x );","        if( !isActive( currentPos ) )","            return false;","","        array[ currentPos ].info = DELETED;","        return true;","    }","","    enum EntryType { ACTIVE, EMPTY, DELETED };","","  private:","    struct HashEntry","    {","        HashedObj element;","        EntryType info;","","        HashEntry( const HashedObj & e = HashedObj{ }, EntryType i = EMPTY )","          : element{ e }, info{ i } { }","        ","        HashEntry( HashedObj && e, EntryType i = EMPTY )","          : element{ std::move( e ) }, info{ i } { }","    };","    ","    vector<HashEntry> array;","    int currentSize;","","    bool isActive( int currentPos ) const","      { return array[ currentPos ].info == ACTIVE; }","","    int findPos( const HashedObj & x ) const","    {","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return currentPos;","    }","","    void rehash( )","    {","        vector<HashEntry> oldArray = array;","","            // Create new double-sized, empty table","        array.resize( nextPrime( 2 * oldArray.size( ) ) );","        for( auto & entry : array )","            entry.info = EMPTY;","","            // Copy table over","        currentSize = 0;","        for( auto & entry : oldArray )","            if( entry.info == ACTIVE )","                insert( std::move( entry.element ) );","    }","","    size_t myhash( const HashedObj & x ) const","    {","        static hash<HashedObj> hf;","        return hf( x ) % array.size( );","    }","};","","#endif"],"id":28},{"start":{"row":0,"column":0},"end":{"row":36,"column":1},"action":"insert","lines":["#include \"QuadraticProbing.h\"","#include <iostream>","using namespace std;","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime( n ); n += 2 )","        ;","","    return n;","}"]}],[{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"insert","lines":["2"],"id":29}],[{"start":{"row":27,"column":13},"end":{"row":27,"column":14},"action":"insert","lines":["2"],"id":30}],[{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"remove","lines":["2"],"id":31}],[{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"insert","lines":["2"],"id":32}],[{"start":{"row":0,"column":0},"end":{"row":36,"column":1},"action":"remove","lines":["#include \"QuadraticProbing.h\"","#include <iostream>","using namespace std;","","/**"," * Internal method to test if a positive number is prime."," * Not an efficient algorithm."," */","bool isPrime2( int n )","{","    if( n == 2 || n == 3 )","        return true;","","    if( n == 1 || n % 2 == 0 )","        return false;","","    for( int i = 3; i * i <= n; i += 2 )","        if( n % i == 0 )","            return false;","","    return true;","}","","/**"," * Internal method to return a prime number at least as large as n."," * Assumes n > 0."," */","int nextPrime2( int n )","{","    if( n % 2 == 0 )","        ++n;","","    for( ; !isPrime( n ); n += 2 )","        ;","","    return n;","}"],"id":33},{"start":{"row":0,"column":0},"end":{"row":152,"column":6},"action":"insert","lines":["#ifndef QUADRATIC_PROBING_H","#define QUADRATIC_PROBING_H","","#include <vector>","#include <algorithm>","#include <functional>","#include <string>","using namespace std;","","int nextPrime( int n );","","// QuadraticProbing Hash table class","//","// CONSTRUCTION: an approximate initial size or default of 101","//","// ******************PUBLIC OPERATIONS*********************","// bool insert( x )       --> Insert x","// bool remove( x )       --> Remove x","// bool contains( x )     --> Return true if x is present","// void makeEmpty( )      --> Remove all items","// int hashCode( string str ) --> Global method to hash strings","","template <typename HashedObj>","class HashTable2","{","  public:","    explicit HashTable2( int size = 101 ) : array( nextPrime( size ) )","      { makeEmpty( ); }","","    bool contains( const HashedObj & x ) const","    {","        return isActive( findPos( x ) );","    }","","    void makeEmpty( )","    {","        currentSize = 0;","        for( auto & entry : array )","            entry.info = EMPTY;","    }","","    bool insert( const HashedObj & x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ].element = x;","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","    ","    bool insert( HashedObj && x )","    {","            // Insert x as active","        int currentPos = findPos( x );","        if( isActive( currentPos ) )","            return false;","","        if( array[ currentPos ].info != DELETED )","            ++currentSize;","","        array[ currentPos ] = std::move( x );","        array[ currentPos ].info = ACTIVE;","","            // Rehash; see Section 5.5","        if( currentSize > array.size( ) / 2 )","            rehash( );","","        return true;","    }","","    bool remove( const HashedObj & x )","    {","        int currentPos = findPos( x );","        if( !isActive( currentPos ) )","            return false;","","        array[ currentPos ].info = DELETED;","        return true;","    }","","    enum EntryType { ACTIVE, EMPTY, DELETED };","","  private:","    struct HashEntry","    {","        HashedObj element;","        EntryType info;","","        HashEntry( const HashedObj & e = HashedObj{ }, EntryType i = EMPTY )","          : element{ e }, info{ i } { }","        ","        HashEntry( HashedObj && e, EntryType i = EMPTY )","          : element{ std::move( e ) }, info{ i } { }","    };","    ","    vector<HashEntry> array;","    int currentSize;","","    bool isActive( int currentPos ) const","      { return array[ currentPos ].info == ACTIVE; }","","    int findPos( const HashedObj & x ) const","    {","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return currentPos;","    }","","    void rehash( )","    {","        vector<HashEntry> oldArray = array;","","            // Create new double-sized, empty table","        array.resize( nextPrime( 2 * oldArray.size( ) ) );","        for( auto & entry : array )","            entry.info = EMPTY;","","            // Copy table over","        currentSize = 0;","        for( auto & entry : oldArray )","            if( entry.info == ACTIVE )","                insert( std::move( entry.element ) );","    }","","    size_t myhash( const HashedObj & x ) const","    {","        static hash<HashedObj> hf;","        return hf( x ) % array.size( );","    }","};","","#endif"]}],[{"start":{"row":127,"column":5},"end":{"row":128,"column":0},"action":"insert","lines":["",""],"id":39},{"start":{"row":128,"column":0},"end":{"row":128,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":128,"column":4},"end":{"row":143,"column":5},"action":"insert","lines":["int findPos( const HashedObj & x ) const","    {","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return currentPos;","    }"],"id":40}],[{"start":{"row":128,"column":14},"end":{"row":128,"column":15},"action":"remove","lines":["s"],"id":41}],[{"start":{"row":128,"column":13},"end":{"row":128,"column":14},"action":"remove","lines":["o"],"id":42}],[{"start":{"row":128,"column":12},"end":{"row":128,"column":13},"action":"remove","lines":["P"],"id":43}],[{"start":{"row":128,"column":11},"end":{"row":128,"column":12},"action":"remove","lines":["d"],"id":44}],[{"start":{"row":128,"column":10},"end":{"row":128,"column":11},"action":"remove","lines":["n"],"id":45}],[{"start":{"row":128,"column":9},"end":{"row":128,"column":10},"action":"remove","lines":["i"],"id":46}],[{"start":{"row":128,"column":8},"end":{"row":128,"column":9},"action":"remove","lines":["f"],"id":47}],[{"start":{"row":128,"column":8},"end":{"row":128,"column":9},"action":"insert","lines":["c"],"id":48}],[{"start":{"row":128,"column":9},"end":{"row":128,"column":10},"action":"insert","lines":["o"],"id":49}],[{"start":{"row":128,"column":10},"end":{"row":128,"column":11},"action":"insert","lines":["u"],"id":50}],[{"start":{"row":128,"column":11},"end":{"row":128,"column":12},"action":"insert","lines":["t"],"id":51}],[{"start":{"row":128,"column":12},"end":{"row":128,"column":13},"action":"insert","lines":["n"],"id":52}],[{"start":{"row":128,"column":13},"end":{"row":128,"column":14},"action":"insert","lines":["C"],"id":53}],[{"start":{"row":128,"column":13},"end":{"row":128,"column":14},"action":"remove","lines":["C"],"id":54}],[{"start":{"row":128,"column":12},"end":{"row":128,"column":13},"action":"remove","lines":["n"],"id":55}],[{"start":{"row":128,"column":11},"end":{"row":128,"column":12},"action":"remove","lines":["t"],"id":56}],[{"start":{"row":128,"column":10},"end":{"row":128,"column":11},"action":"remove","lines":["u"],"id":57}],[{"start":{"row":128,"column":9},"end":{"row":128,"column":10},"action":"remove","lines":["o"],"id":58}],[{"start":{"row":128,"column":8},"end":{"row":128,"column":9},"action":"remove","lines":["c"],"id":59}],[{"start":{"row":128,"column":8},"end":{"row":128,"column":9},"action":"insert","lines":["c"],"id":60}],[{"start":{"row":128,"column":9},"end":{"row":128,"column":10},"action":"insert","lines":["o"],"id":61}],[{"start":{"row":128,"column":10},"end":{"row":128,"column":11},"action":"insert","lines":["u"],"id":62}],[{"start":{"row":128,"column":11},"end":{"row":128,"column":12},"action":"insert","lines":["t"],"id":63}],[{"start":{"row":128,"column":11},"end":{"row":128,"column":12},"action":"remove","lines":["t"],"id":64}],[{"start":{"row":128,"column":11},"end":{"row":128,"column":12},"action":"insert","lines":["n"],"id":65}],[{"start":{"row":128,"column":12},"end":{"row":128,"column":13},"action":"insert","lines":["t"],"id":66}],[{"start":{"row":128,"column":13},"end":{"row":128,"column":14},"action":"insert","lines":["C"],"id":67}],[{"start":{"row":128,"column":14},"end":{"row":128,"column":15},"action":"insert","lines":["o"],"id":68}],[{"start":{"row":128,"column":15},"end":{"row":128,"column":16},"action":"insert","lines":["l"],"id":69}],[{"start":{"row":128,"column":16},"end":{"row":128,"column":17},"action":"insert","lines":["l"],"id":70}],[{"start":{"row":128,"column":17},"end":{"row":128,"column":18},"action":"insert","lines":["i"],"id":71}],[{"start":{"row":128,"column":18},"end":{"row":128,"column":19},"action":"insert","lines":["s"],"id":72}],[{"start":{"row":128,"column":19},"end":{"row":128,"column":20},"action":"insert","lines":["i"],"id":73}],[{"start":{"row":128,"column":20},"end":{"row":128,"column":21},"action":"insert","lines":["o"],"id":74}],[{"start":{"row":128,"column":21},"end":{"row":128,"column":22},"action":"insert","lines":["n"],"id":75}],[{"start":{"row":128,"column":22},"end":{"row":128,"column":23},"action":"insert","lines":["s"],"id":76}],[{"start":{"row":128,"column":13},"end":{"row":128,"column":23},"action":"remove","lines":["Collisions"],"id":77}],[{"start":{"row":128,"column":13},"end":{"row":128,"column":14},"action":"insert","lines":["C"],"id":78}],[{"start":{"row":129,"column":5},"end":{"row":130,"column":0},"action":"insert","lines":["",""],"id":79},{"start":{"row":130,"column":0},"end":{"row":130,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":130,"column":8},"end":{"row":130,"column":9},"action":"insert","lines":["i"],"id":80}],[{"start":{"row":130,"column":9},"end":{"row":130,"column":10},"action":"insert","lines":["n"],"id":81}],[{"start":{"row":130,"column":10},"end":{"row":130,"column":11},"action":"insert","lines":["t"],"id":82}],[{"start":{"row":130,"column":11},"end":{"row":130,"column":12},"action":"insert","lines":[" "],"id":83}],[{"start":{"row":130,"column":12},"end":{"row":130,"column":13},"action":"insert","lines":["c"],"id":84}],[{"start":{"row":130,"column":13},"end":{"row":130,"column":14},"action":"insert","lines":["o"],"id":85}],[{"start":{"row":130,"column":14},"end":{"row":130,"column":15},"action":"insert","lines":["u"],"id":86}],[{"start":{"row":130,"column":15},"end":{"row":130,"column":16},"action":"insert","lines":["n"],"id":87}],[{"start":{"row":130,"column":16},"end":{"row":130,"column":17},"action":"insert","lines":["t"],"id":88}],[{"start":{"row":130,"column":17},"end":{"row":130,"column":18},"action":"insert","lines":["e"],"id":89}],[{"start":{"row":130,"column":18},"end":{"row":130,"column":19},"action":"insert","lines":["r"],"id":90}],[{"start":{"row":130,"column":19},"end":{"row":130,"column":20},"action":"insert","lines":[" "],"id":91}],[{"start":{"row":130,"column":20},"end":{"row":130,"column":21},"action":"insert","lines":["="],"id":92}],[{"start":{"row":130,"column":21},"end":{"row":130,"column":22},"action":"insert","lines":[" "],"id":93}],[{"start":{"row":130,"column":22},"end":{"row":130,"column":23},"action":"insert","lines":["0"],"id":94}],[{"start":{"row":130,"column":23},"end":{"row":130,"column":24},"action":"insert","lines":[";"],"id":95}],[{"start":{"row":143,"column":16},"end":{"row":143,"column":25},"action":"remove","lines":["urrentPos"],"id":96},{"start":{"row":143,"column":16},"end":{"row":143,"column":17},"action":"insert","lines":["o"]}],[{"start":{"row":143,"column":17},"end":{"row":143,"column":18},"action":"insert","lines":["u"],"id":97}],[{"start":{"row":143,"column":18},"end":{"row":143,"column":19},"action":"insert","lines":["n"],"id":98}],[{"start":{"row":143,"column":19},"end":{"row":143,"column":20},"action":"insert","lines":["t"],"id":99}],[{"start":{"row":143,"column":20},"end":{"row":143,"column":21},"action":"insert","lines":["e"],"id":100}],[{"start":{"row":143,"column":21},"end":{"row":143,"column":22},"action":"insert","lines":["r"],"id":101}],[{"start":{"row":136,"column":9},"end":{"row":137,"column":0},"action":"insert","lines":["",""],"id":103},{"start":{"row":137,"column":0},"end":{"row":137,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":137,"column":12},"end":{"row":137,"column":13},"action":"insert","lines":["c"],"id":104}],[{"start":{"row":137,"column":13},"end":{"row":137,"column":14},"action":"insert","lines":["o"],"id":105}],[{"start":{"row":137,"column":14},"end":{"row":137,"column":15},"action":"insert","lines":["u"],"id":106}],[{"start":{"row":137,"column":15},"end":{"row":137,"column":16},"action":"insert","lines":["n"],"id":107}],[{"start":{"row":137,"column":16},"end":{"row":137,"column":17},"action":"insert","lines":["t"],"id":108}],[{"start":{"row":137,"column":17},"end":{"row":137,"column":18},"action":"insert","lines":["e"],"id":109}],[{"start":{"row":137,"column":18},"end":{"row":137,"column":19},"action":"insert","lines":["r"],"id":110}],[{"start":{"row":137,"column":19},"end":{"row":137,"column":20},"action":"insert","lines":["+"],"id":111}],[{"start":{"row":137,"column":20},"end":{"row":137,"column":21},"action":"insert","lines":["+"],"id":112}],[{"start":{"row":137,"column":21},"end":{"row":137,"column":22},"action":"insert","lines":[";"],"id":113}],[{"start":{"row":128,"column":4},"end":{"row":145,"column":5},"action":"remove","lines":["int countC( const HashedObj & x ) const","    {","        int counter = 0;","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            counter++;","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return counter;","    }"],"id":114}],[{"start":{"row":128,"column":0},"end":{"row":128,"column":4},"action":"remove","lines":["    "],"id":115}],[{"start":{"row":127,"column":5},"end":{"row":128,"column":0},"action":"remove","lines":["",""],"id":116}],[{"start":{"row":89,"column":5},"end":{"row":90,"column":0},"action":"insert","lines":["",""],"id":117},{"start":{"row":90,"column":0},"end":{"row":90,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":90,"column":4},"end":{"row":107,"column":5},"action":"insert","lines":["int countC( const HashedObj & x ) const","    {","        int counter = 0;","        int offset = 1;","        int currentPos = myhash( x );","","        while( array[ currentPos ].info != EMPTY &&","               array[ currentPos ].element != x )","        {","            counter++;","            currentPos += offset;  // Compute ith probe","            offset += 2;","            if( currentPos >= array.size( ) )","                currentPos -= array.size( );","        }","","        return counter;","    }"],"id":118}],[{"start":{"row":165,"column":8},"end":{"row":165,"column":9},"action":"insert","lines":["/"],"id":119}],[{"start":{"row":165,"column":9},"end":{"row":165,"column":10},"action":"insert","lines":["/"],"id":120}],[{"start":{"row":166,"column":8},"end":{"row":166,"column":9},"action":"insert","lines":["/"],"id":121}],[{"start":{"row":166,"column":9},"end":{"row":166,"column":10},"action":"insert","lines":["/"],"id":122}],[{"start":{"row":164,"column":5},"end":{"row":165,"column":0},"action":"insert","lines":["",""],"id":123},{"start":{"row":165,"column":0},"end":{"row":165,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":165,"column":8},"end":{"row":174,"column":44},"action":"insert","lines":["//static hash<HashedObj> hf;","        size_t hashVal = 0;","        for( char ch : x ) {","            int highorder = hashVal & 0xf8000000;","            hashVal = hashVal << 5;","            hashVal = hashVal ^ (highorder >> 27);","            hashVal = hashVal ^ ch;","        }","        return hashVal;","        //return hf( x ) % theLists.size( );"],"id":124}],[{"start":{"row":173,"column":23},"end":{"row":174,"column":44},"action":"remove","lines":["","        //return hf( x ) % theLists.size( );"],"id":125}],[{"start":{"row":164,"column":5},"end":{"row":165,"column":36},"action":"remove","lines":["","        //static hash<HashedObj> hf;"],"id":126}],[{"start":{"row":172,"column":22},"end":{"row":172,"column":23},"action":"remove","lines":[";"],"id":127}],[{"start":{"row":172,"column":22},"end":{"row":172,"column":23},"action":"insert","lines":[" "],"id":128}],[{"start":{"row":172,"column":23},"end":{"row":172,"column":39},"action":"insert","lines":["% array.size( );"],"id":129}]]},"ace":{"folds":[],"scrolltop":1425.5,"scrollleft":0,"selection":{"start":{"row":172,"column":39},"end":{"row":172,"column":39},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1447903581310,"hash":"455fbd73126f6017b3c794cf5642f94526b7dfed"}